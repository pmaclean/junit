package example2;

import java.util.stream.Stream;

import org.junit.Rule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import static org.mockito.Mockito.*;

class DuckHomeMatcherUnitTest3 {
	
	static Stream<Arguments> generateSameWaterPairings() {
	    return Stream.of(
	        Arguments.of("Mortons Lake","Mortons Lake"),
	        Arguments.of("Mortons Lake","Mortons lake"),
	        Arguments.of("Mortons Lake","Mortons Lake "),
	        Arguments.of("Mortons Lake","Mortons  Lake"),
	        Arguments.of("Mortons Lake","Mortons Laaaaak")
	    );
	}
	
	@ParameterizedTest
	@MethodSource("generateSameWaterPairings")
	public void Match_SpacingDifferenct_ReturnsTrue(String home1, String home2)
	{
		// Arrange
		DuckWordRepo myRepo = Mock(DuckWordRepo.class);
		when(myRepo.DuckSpeakToEnglishTerm(anyString())).thenAnswer(i -> i.getArguments()[0] == "Laaaaak"? "Lake" : i.getArguments()[0]);
		DuckHomeMatcher1 matcher = new DuckHomeMatcher2(myRepo);
		boolean expectedResult = true;

		// Act
		boolean actualResult = matcher.Matches(home1, home2);
		
		// Assert
		Assertions.assertEquals(expectedResult, actualResult);
	}
}
