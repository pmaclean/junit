package example2;

import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import static org.mockito.Mockito.*;

/*
 * 
 * Mockito to mock the behavior of the repository.
 * 
 * 
 */

class DuckHomeMatcherUnitTest3 {
	
	static Stream<Arguments> generateWaterBody() {
	    return Stream.of(
	        Arguments.of("Mortons Lake","Mortons Lake", true),
	        Arguments.of("Mortons Lake","I forgot", false),
	        Arguments.of("Mortons Lake","Mortons lake", true),
	        Arguments.of("Mortons Lake","Mortons Lake ", true),
	        Arguments.of("Mortons Lake","Mortons  Lake", true),
	        Arguments.of("Mortons Lake","Mortons Laaaaak", true)
	    );
	}
	
	@ParameterizedTest
	@MethodSource("generateWaterBody")
	public void Match_AllComers_ReturnsMatchExpectation(String home1, String home2, boolean expectedMatch)
	{
		// Arrange
		DuckDialectRepo myRepo = mock(DuckDialectRepo.class);
		when(myRepo.DuckSpeakToEnglishTerm(anyString()))	
			.thenAnswer(i -> duckFakeTrans((String)i.getArguments()[0]));
		
		DuckHomeMatcher2 matcher = new DuckHomeMatcher2(myRepo);

		// Act
		boolean actualResult = matcher.Matches(home1, home2);
		
		// Assert
		Assertions.assertEquals(expectedMatch, actualResult);
	}
	
	public String duckFakeTrans(String duckWord)
	{
		return duckWord.equalsIgnoreCase("Laaaaak") ? "Lake" : duckWord;
	}
	
}
